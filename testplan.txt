    The test plan for my coursework involves two types of testing: unit testing and integration testing.  
    Unit testing is performed on each module individually to ensure that it functions correctly and meets the specifications outlined in the project requirements.  This type of testing is typically automated using a testing framework and involves a series of test cases designed to evaluate the functionality of each module.  The test cases will cover all possible scenarios and inputs, including edge cases and error cases, to ensure that each module behaves as expected.  For example, unit tests for the "mapRead.c" module may include reading a valid map file, reading an invalid map file, and reading an empty file, among other cases.  The results of the unit tests will be compared to the expected output to ensure that the modules are functioning correctly.
    Integration testing, on the other hand, focuses on testing the interaction between different modules.  The goal of integration testing is to ensure that all modules work together seamlessly to produce the desired output.  Integration tests will be performed manually and will simulate the user input.  The test cases will cover various scenarios and user interactions to ensure that the different modules interact with each other as expected.  For example, integration tests may involve testing the interaction between the "mapRead.c" and "routeInit.c" modules to ensure that the data read from the map file is correctly used to initialize the weights for the points and edges in the route.  The results of the integration tests will be compared to the expected output to ensure that the final product meets the coursework requirements.
